//Go уровень 2. Основы работы со стандартной библиотекой Go. Урок 8
//В качестве завершающего задания нужно выполнить программу поиска дубликатов файлов. Дубликаты файлов - это файлы,
//которые совпадают по имени файла и по его размеру.
//Нужно написать консольную программу, которая проверяет наличие дублирующихся файлов. - ok
//Программа должна работать на локальном компьютере и получать на вход путь до директории. - ok
//Программа должна вывести в стандартный поток вывода список дублирующихся файлов, которые находятся как в директории,
//так и в поддиректориях директории,  переданной через аргумент командной строки. - ok
//Данная функция должна работать эффективно при помощи распараллеливания программы
//Программа должна принимать дополнительный ключ - возможность удаления обнаруженных дубликатов файлов после поиска. - ok
//Дополнительно нужно придумать, как обезопасить пользователей от случайного удаления файлов. - ok (защита от случайного
//удаления: значение флага на удаление повторяющегося файла - пустая строка, а для удаления нужно ввести rm)
//В качестве ключей желательно придерживаться общепринятых практик по использованию командных опций.
//Критерии приемки программы:
//Программа компилируется
//Программа выполняет функциональность, описанную выше.
//Программа покрыта тестами
//Программа содержит документацию и примеры использования
//Программа обладает флагом “-h/--help” для краткого объяснения функциональности - ok
//Программа должна уведомлять пользователя об ошибках, возникающих во время выполнения - ok
//go run hw8.go /home/user/go/src/go_level_2/go_level_2/lesson8/scandirectory
//go run hw8.go --pFlag="/home/user/go/src/go_level_2/go_level_2/lesson8/scandirectory" --rFlag="rm"

package main

import (
	"go_level_2/go_level_2/lesson8/scandirectory"
	"log"
)

var err error

func main() {
	//var path string
	//var pathDirectory = os.Args[1:2] //запись аргумента командной строки - читаем путь к нужной директории
	//for i := 0; i < len(pathDirectory); i++ {
	//	path = path + pathDirectory[i]
	//}
	//читаем путь к нужной директории, читаем флаг возможности удаления повторяющегося файла
	path, rm := scandirectory.ReadFlagDeleteDoubleFile()
	_ = rm //флаг удаления повторяющегося файла пока не используем

	err = scandirectory.ScanDirectory(path) //чтение всех файлов в исходной директории и во вложенных в нее директориях
	if err != nil {
		log.Fatal(err)
	}

	err = scandirectory.PrintNameDoubleFiles() //вывод на печать повторяющихся файлов
	if err != nil {
		log.Fatal(err)
	}
}
